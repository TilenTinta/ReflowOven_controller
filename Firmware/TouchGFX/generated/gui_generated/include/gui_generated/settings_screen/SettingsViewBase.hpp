/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSVIEWBASE_HPP
#define SETTINGSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen/SettingsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SettingsToPid_P_flag()
    {
        // Override and implement this function in Settings
    }
    virtual void SettingsToPid_I_flag()
    {
        // Override and implement this function in Settings
    }
    virtual void SettingsToPid_D_flag()
    {
        // Override and implement this function in Settings
    }
    virtual void ProbesNoSelect()
    {
        // Override and implement this function in Settings
    }
    virtual void SSRNoSelect()
    {
        // Override and implement this function in Settings
    }
    virtual void CFSelect()
    {
        // Override and implement this function in Settings
    }
    virtual void outputAUX1()
    {
        // Override and implement this function in Settings
    }
    virtual void outputAUX2()
    {
        // Override and implement this function in Settings
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::TextArea txt;
    touchgfx::TextArea txt_1;
    touchgfx::TextArea txt_1_2;
    touchgfx::TextArea txt_1_2_1;
    touchgfx::TextArea txt_1_1;
    touchgfx::TextArea txt_1_1_1;
    touchgfx::TextArea txt_1_1_1_2;
    touchgfx::TextArea txt_1_1_1_2_1;
    touchgfx::TextArea txt_1_1_1_1_1;
    touchgfx::TextArea txt_1_1_1_1_1_1;
    touchgfx::TextArea txt_1_1_1_1_1_1_1;
    touchgfx::ButtonWithLabel btnBack;
    touchgfx::ButtonWithLabel btnSave;
    touchgfx::ButtonWithLabel btnSetPidP;
    touchgfx::ButtonWithLabel btnSetPidI;
    touchgfx::ButtonWithLabel btnSetPidD;
    touchgfx::ToggleButton toggleBtnProbes;
    touchgfx::ToggleButton toggleBtnSSR;
    touchgfx::ToggleButton toggleBtnCF;
    touchgfx::ToggleButton toggleBtnAUX1;
    touchgfx::ToggleButton toggleBtnAUX2;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SETTINGSVIEWBASE_HPP
