/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef HOME_DRYVIEWBASE_HPP
#define HOME_DRYVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/home_dry_screen/Home_DryPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class Home_DryViewBase : public touchgfx::View<Home_DryPresenter>
{
public:
    Home_DryViewBase();
    virtual ~Home_DryViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void StartDrying()
    {
        // Override and implement this function in Home_Dry
    }
    virtual void StopDrying()
    {
        // Override and implement this function in Home_Dry
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard txtTimeMinLeft;
    touchgfx::TextArea textMin;
    touchgfx::TextAreaWithOneWildcard txtTimeHLeft;
    touchgfx::TextArea textH;
    touchgfx::TextArea textH_1;
    touchgfx::TextArea txt_1;
    touchgfx::TextArea txt_1_2;
    touchgfx::TextArea txt_1_2_2;
    touchgfx::TextArea txt_1_2_1;
    touchgfx::TextArea txt_1_1;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::TextAreaWithOneWildcard txtDryTempSet;
    touchgfx::TextAreaWithOneWildcard txtDryTimeMinSet;
    touchgfx::TextAreaWithOneWildcard txtDryTimeHSet;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextAreaWithOneWildcard txtCurTemp;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::ButtonWithLabel btnDryMenu;
    touchgfx::ButtonWithLabel btnDryStop;
    touchgfx::ButtonWithLabel btnDryStart;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TXTTIMEMINLEFT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar txtTimeMinLeftBuffer[TXTTIMEMINLEFT_SIZE];
    static const uint16_t TXTTIMEHLEFT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar txtTimeHLeftBuffer[TXTTIMEHLEFT_SIZE];
    static const uint16_t TXTDRYTEMPSET_SIZE = 4;
    touchgfx::Unicode::UnicodeChar txtDryTempSetBuffer[TXTDRYTEMPSET_SIZE];
    static const uint16_t TXTDRYTIMEMINSET_SIZE = 8;
    touchgfx::Unicode::UnicodeChar txtDryTimeMinSetBuffer[TXTDRYTIMEMINSET_SIZE];
    static const uint16_t TXTDRYTIMEHSET_SIZE = 8;
    touchgfx::Unicode::UnicodeChar txtDryTimeHSetBuffer[TXTDRYTIMEHSET_SIZE];
    static const uint16_t TXTCURTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar txtCurTempBuffer[TXTCURTEMP_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Home_DryViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // HOME_DRYVIEWBASE_HPP
