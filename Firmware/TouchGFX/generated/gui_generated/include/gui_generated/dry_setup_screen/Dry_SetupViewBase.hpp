/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DRY_SETUPVIEWBASE_HPP
#define DRY_SETUPVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/dry_setup_screen/Dry_SetupPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class Dry_SetupViewBase : public touchgfx::View<Dry_SetupPresenter>
{
public:
    Dry_SetupViewBase();
    virtual ~Dry_SetupViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void TempUp()
    {
        // Override and implement this function in Dry_Setup
    }
    virtual void TempDn()
    {
        // Override and implement this function in Dry_Setup
    }
    virtual void TimeUp()
    {
        // Override and implement this function in Dry_Setup
    }
    virtual void TimeDn()
    {
        // Override and implement this function in Dry_Setup
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::TextArea textArea1_2_2;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::TextArea textArea1_2_1;
    touchgfx::ButtonWithLabel btnSet;
    touchgfx::ButtonWithIcon btnTemp_UP;
    touchgfx::ButtonWithIcon btnTemp_DN;
    touchgfx::TextAreaWithOneWildcard txtDryTemp;
    touchgfx::ButtonWithIcon btnTime_UP;
    touchgfx::ButtonWithIcon btnTime_DN;
    touchgfx::TextAreaWithOneWildcard txtDryTimeMin;
    touchgfx::ButtonWithLabel btnBack;
    touchgfx::TextArea textArea1;
    touchgfx::TextAreaWithOneWildcard txtDryTimeH;
    touchgfx::TextArea textArea1_2;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextArea txt;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TXTDRYTEMP_SIZE = 4;
    touchgfx::Unicode::UnicodeChar txtDryTempBuffer[TXTDRYTEMP_SIZE];
    static const uint16_t TXTDRYTIMEMIN_SIZE = 4;
    touchgfx::Unicode::UnicodeChar txtDryTimeMinBuffer[TXTDRYTIMEMIN_SIZE];
    static const uint16_t TXTDRYTIMEH_SIZE = 4;
    touchgfx::Unicode::UnicodeChar txtDryTimeHBuffer[TXTDRYTIMEH_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Dry_SetupViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // DRY_SETUPVIEWBASE_HPP
